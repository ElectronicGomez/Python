
from tkinter import Tk, Frame, END, StringVar, IntVar
from tkinter.scrolledtext import ScrolledText
from tkinter import Button, Entry, Label, LabelFrame, W
import socket
import threading
import time


import tkinter as tk
import tkinter.ttk as ttk
from tkinter import *


HEADER_SIZE = 10

class Client:
    def __init__(self, address, port, username):
        self.address = address
        self.port = port
        self.username = username
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.connect((self.address, self.port))
    
    def envia(self, DATA):
        data_len = len(DATA + self.username + "> ")
        self.sock.send(f"{data_len:<{HEADER_SIZE}}{self.username}> {DATA}".encode('utf-8'))
        
        return None
    
    
    def recibe(self):
        data_header = self.sock.recv(HEADER_SIZE)
        
        if not data_header:
            return False
        data = self.sock.recv(int(data_header))
        
        return data.decode('utf-8')
    
class APP:
    def __init__(self, master):
        self.master = master
        self.master.title(" Chat IPs")
        self.master.resizable(0, 0)
        self.master.geometry("600x270+10+200")

        
        self.cliente = None
        self.conectado = False
        
        self.address = StringVar(value=socket.gethostbyname(socket.gethostname()))
        self.port = IntVar(value=5000)
        self.username = StringVar()
        self.mensaje = StringVar()
        self.status = StringVar()
        self.status.set("Sin conexión")
        self.hora = StringVar()        
        self.fecha = StringVar()

        frm1 = LabelFrame(self.master, text=" Data",bg="#3366FF")
        frm2 = Frame(self.master)
        frm1.pack(side = tk.LEFT,padx=5, pady=5, anchor =tk.N)
        frm2.pack(padx=5, pady=5)

        # -------------------------- frm1 -------------------------
        self.lblServidor = Label(frm1, text=" Direccion IP:")
        self.inServidor = Entry(frm1, textvariable=self.address, width=15)
        self.lblPuerta = Label(frm1, text=" Host :")
        self.inPuerta = Entry(frm1, textvariable=self.port, width=15)
        self.lblUsuario = Label(frm1, text=" Nickname:")
        self.inUsuario = Entry(frm1, textvariable=self.username, width=15)
        self.btnConectar = Button(frm1, text=" Connect ", width=20 , height = 2, fg="black",command=self.Conversar)

        self.lblServidor.grid(row=0, column=0, padx=5, pady=10)
        self.inServidor.grid(row=0, column=1, padx=5, pady=10)
        self.lblPuerta.grid(row=1, column=0, padx=5, pady=10)
        self.inPuerta.grid(row=1, column=1, padx=5, pady=10)
        self.lblUsuario.grid(row=2, column=0, padx=5, pady=10)
        self.inUsuario.grid(row=2, column=1, padx=5, pady=10)
        self.btnConectar.grid(row=4, columnspan=2, padx=20, pady=20)
                
        # -------------------------- frm2 -------------------------
        self.txtChat = ScrolledText(frm2, width=40, height = 11)
        self.inText = Entry(frm2, textvariable=self.mensaje, width=40, state='disabled')
        self.btnSend = Button(frm2, text=" Send", width=10, command=lambda: self.Enviador(None), state='disabled')
        
        self.txtChat.grid(row=0, column=0, columnspan=2, padx=5, pady=5)
        self.inText.grid(row=1, column=0, padx=5, pady=5,sticky=W)
        self.btnSend.grid(row=1, column=1, padx=5, pady=5)
        
        self.txtChat.config(state='disable')
        
        #----------------------------binds--------------------------
        self.inText.bind("<Return>", self.Enviador)
        self.inUsuario.bind("<Return>",lambda event:self.Conversar())
        
        #-------------------------protocols---------------------------
        self.master.protocol("WM_DELETE_WINDOW", self.Cerrar)
        
        
        
        self.statusBar = tk.Label(self.master,textvariable=self.status, bd=1, relief=tk.SUNKEN, anchor=tk.W)
        self.statusBar.place(height= 20, width = 600, x =0, y= 250)
    
    def Conversar(self):
        if self.conectado == False:
            
            if self.address.get() and self.port.get() and self.username.get():
                
                try:
                    self.cliente = Client(self.address.get(), self.port.get(), self.username.get())
                    self.inServidor.config(state='disable')
                    self.inPuerta.config(state='disable')
                    self.inUsuario.config(state='disable')
                    self.inText.config(state='normal')
                    self.btnSend.config(state='normal')
                    self.btnConectar.config(text='DESCONECTAR')
                    self.txtChat.insert(tk.INSERT,self.mensaje.get() + "\n",'rojo')
                    self.txtChat.tag_config('rojo', foreground="red")
                    self.txtChat.config(state='disable')
                    self.status.set("Conexión establecida")
                    self.conectado = True
                    
                    
                    
                except:
                    pass
            
            
            else:
                self.status.set("Sin conexión")
                pass
            th = threading.Thread(target=self.hilo, daemon=True)
            th.start()
            
        else:
            self.cliente.sock.close()
            self.inServidor.config(state='normal')
            self.inPuerta.config(state='normal')
            self.inUsuario.config(state='normal')
            self.inText.config(state='disable')
            self.btnSend.config(state='disable')
            self.btnConectar.config(text='CONECTAR')
            self.txtChat.config(state='disable')
            self.conectado = False

    def hilo(self):
        self.Recepcionar()

    def Recepcionar(self):
        self.hora.set(time.strftime("%H:%M:%S"))
        self.fecha.set(time.strftime("%d/%m/%y"))
        while self.conectado:
            try:
                MENSAJEENTRANTE = self.cliente.recibe()
                self.txtChat.insert(END, MENSAJEENTRANTE + "\n",'rojo')
                self.txtChat.tag_config('rojo', foreground="red")
                if MENSAJEENTRANTE == False:
                    self.cliente.sock.close()
                    self.inServidor.config(state='normal')
                    self.inPuerta.config(state='normal')
                    self.inUsuario.config(state='normal')
                    self.btnConectar.config(text='Conectar')
                    self.txtChat.config(state='normal')
                    
                    self.txtChat.config(state='disable')
                    self.conectado = False
                else:
                    self.txtChat.config(state='normal')
                    self.txtChat.insert(tk.INSERT, str(self.fecha.get())+" - "+str(self.hora.get())+ "\n",'rojo')
                    self.txtChat.insert(tk.INSERT, MENSAJEENTRANTE + "\n",'rojo')
                    self.txtChat.tag_config('rojo', foreground="red")
                    self.txtChat.see(END)
                    self.txtChat.config(state='disable')
            except:
                break
        
        
        self.master.after(10,self.hilo)
        
    
    
    def Enviador(self, handle):
        self.txtChat.insert(tk.INSERT, self.mensaje.get() + "\n",'verde')
        self.txtChat.tag_config('verde', foreground="green")
        # self.txtChat.config(state="disabled")D
        
        
        if self.conectado and self.mensaje.get():
            
            self.cliente.envia(self.mensaje.get())
            
            self.mensaje.set("")
            
            #self.txtChat.see(END)
            
            
    def Cerrar(self):
            try: self.cliente.sock.close()
            except:pass
            self.master.destroy()  

    
root = Tk()
app = APP(root)
root.mainloop()


print("raaaaa")